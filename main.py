# This is a sample Python script.

# Press Shift+F10 to execute it or replace it with your code.
# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.

import logging
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from database import get_user, create_or_update_user, add_flight_result, get_leaderboard

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
LASTNAME, FIRSTNAME, GROUP, BIRTHDATE = range(4)
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
SIMULATOR, TRACK, MODE, BEST_TIME, IMAGE = range(4, 9)
# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
LEADERBOARD_SIMULATOR, LEADERBOARD_MODE, LEADERBOARD_TRACK = range(8, 11)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [
        ['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'],
        ['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'],
        ['–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! üëã\n\n'
        '–Ø –±–æ—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã FPV Simulators Leaderboard.\n'
        '–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∑–∞—Ç–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )

async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        ['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'],
        ['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞'],
        ['–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )

async def register_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await update.message.reply_text(
        '–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n'
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:',
        reply_markup=ReplyKeyboardRemove()
    )
    return LASTNAME

async def lastname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–º–∏–ª–∏–∏"""
    context.user_data['lastname'] = update.message.text
    await update.message.reply_text('–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
    return FIRSTNAME

async def firstname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    context.user_data['firstname'] = update.message.text
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —É—á–µ–±–Ω—É—é –≥—Ä—É–ø–ø—É:')
    return GROUP

async def group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    context.user_data['group'] = update.message.text
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:')
    return BIRTHDATE

async def birthdate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        datetime.strptime(update.message.text, '%d.%m.%Y')
        context.user_data['birthdate'] = update.message.text
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        create_or_update_user(
            user_id=update.effective_user.id,
            lastname=context.user_data['lastname'],
            firstname=context.user_data['firstname'],
            group_name=context.user_data['group'],
            birthdate=context.user_data['birthdate']
        )
        
        await show_main_menu(update, context)
        
        await update.message.reply_text(
            '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚úÖ\n\n'
            f'–§–∞–º–∏–ª–∏—è: {context.user_data["lastname"]}\n'
            f'–ò–º—è: {context.user_data["firstname"]}\n'
            f'–ì—Ä—É–ø–ø–∞: {context.user_data["group"]}\n'
            f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {context.user_data["birthdate"]}'
        )
    except ValueError:
        await update.message.reply_text(
            '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:'
        )
        return BIRTHDATE
    
    return ConversationHandler.END

async def register_result_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª–µ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = get_user(update.effective_user.id)
    
    if not user:
        await update.message.reply_text(
            '–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n'
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"'
        )
        return ConversationHandler.END
    
    keyboard = [
        ['FPV Freerider'],
        ['DCL The Game'],
        ['Liftoff']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º—É–ª—è—Ç–æ—Ä:',
        reply_markup=reply_markup
    )
    return SIMULATOR

async def simulator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞"""
    context.user_data['simulator'] = update.message.text
    
    keyboard = [
        ['map1'],
        ['map2']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞—Å—Å—É:',
        reply_markup=reply_markup
    )
    return TRACK

async def track(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞—Å—Å—ã"""
    context.user_data['track'] = update.message.text
    
    keyboard = [
        ['Self-Leveling'],
        ['Acro']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:',
        reply_markup=reply_markup
    )
    return MODE

async def mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞"""
    context.user_data['mode'] = update.message.text
    await update.message.reply_text(
        '–í–≤–µ–¥–∏—Ç–µ –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:',
        reply_markup=ReplyKeyboardRemove()
    )
    return BEST_TIME

async def best_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—É—á—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        time = float(update.message.text)
        context.user_data['best_time'] = time
        await update.message.reply_text(
            '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –≤–∞—à–µ –≤—Ä–µ–º—è.\n'
            '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG –∏–ª–∏ PNG.'
        )
        return IMAGE
    except ValueError:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:')
        return BEST_TIME

async def save_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        if not update.message.photo:
            await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.')
            return IMAGE
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        
        # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f'images/{update.effective_user.id}_{timestamp}.jpg'
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        await file.download_to_drive(filename)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_flight_result(
            user_id=update.effective_user.id,
            simulator=context.user_data['simulator'],
            track=context.user_data['track'],
            mode=context.user_data['mode'],
            best_time=context.user_data['best_time'],
            image_path=filename
        )
        
        await show_main_menu(update, context)
        await update.message.reply_text(
            '–†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! ‚úÖ\n\n'
            f'–°–∏–º—É–ª—è—Ç–æ—Ä: {context.user_data["simulator"]}\n'
            f'–¢—Ä–∞—Å—Å–∞: {context.user_data["track"]}\n'
            f'–†–µ–∂–∏–º: {context.user_data["mode"]}\n'
            f'–õ—É—á—à–µ–µ –≤—Ä–µ–º—è: {context.user_data["best_time"]:.2f} —Å–µ–∫'
        )
    except ValueError as e:
        # –ï—Å–ª–∏ –Ω–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ö—É–∂–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
        await show_main_menu(update, context)
        await update.message.reply_text(
            '–≠—Ç–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ö—É–∂–µ –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ. –°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–µ –±—É–¥–µ—Ç.'
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        await show_main_menu(update, context)
        await update.message.reply_text(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        )
    
    return ConversationHandler.END

async def leaderboard_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤"""
    keyboard = [
        ['FPV Freerider'],
        ['DCL The Game'],
        ['Liftoff']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º—É–ª—è—Ç–æ—Ä:',
        reply_markup=reply_markup
    )
    return LEADERBOARD_SIMULATOR

async def leaderboard_simulator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–∏–º—É–ª—è—Ç–æ—Ä–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤"""
    context.user_data['leaderboard_simulator'] = update.message.text
    
    keyboard = [
        ['Self-Leveling'],
        ['Acro']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–ª—ë—Ç–∞:',
        reply_markup=reply_markup
    )
    return LEADERBOARD_MODE

async def leaderboard_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤"""
    context.user_data['leaderboard_mode'] = update.message.text
    
    keyboard = [
        ['map1'],
        ['map2']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∞—Å—Å—ã:',
        reply_markup=reply_markup
    )
    return LEADERBOARD_TRACK

async def leaderboard_track(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞—Å—Å—ã –∏ –ø–æ–∫–∞–∑ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤"""
    context.user_data['leaderboard_track'] = update.message.text
    
    results = get_leaderboard(
        simulator=context.user_data['leaderboard_simulator'],
        mode=context.user_data['leaderboard_mode'],
        track=context.user_data['leaderboard_track']
    )
    
    current_time = datetime.now().strftime('%H:%M %d.%m.%Y')
    leaderboard = f'Leaderboard –ê—ç—Ä–æ–∫–≤–∞–Ω—Ç—É–º-15 –æ—Ç {current_time} –≥.\n'
    leaderboard += f'{context.user_data["leaderboard_simulator"]}, {context.user_data["leaderboard_mode"].lower()}, {context.user_data["leaderboard_track"]}\n\n'
    
    if not results:
        leaderboard += '–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.'
    else:
        for i, (lastname, firstname, group, time) in enumerate(results, 1):
            leaderboard += f'{i}. {time:.3f} - {lastname} {firstname}, –≥—Ä. {group}\n'
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –º–µ—Å—Ç–∞, –µ—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ 10
        for i in range(len(results) + 1, 11):
            leaderboard += f'{i}. (–º–µ—Å—Ç–æ –Ω–µ –∑–∞–Ω—è—Ç–æ)\n'
    
    await show_main_menu(update, context)
    await update.message.reply_text(leaderboard)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    await show_main_menu(update, context)
    await update.message.reply_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
    return ConversationHandler.END

def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
    application = Application.builder().token('7792446695:AAENgsE0ROOnpwa8cPjHMYmRk5T7QCCukUA').build()

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è$'), register_start)],
        states={
            LASTNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, lastname)],
            FIRSTNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, firstname)],
            GROUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, group)],
            BIRTHDATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, birthdate)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞$'), register_result_start)],
        states={
            SIMULATOR: [MessageHandler(filters.Regex('^(FPV Freerider|DCL The Game|Liftoff)$'), simulator)],
            TRACK: [MessageHandler(filters.Regex('^(map1|map2)$'), track)],
            MODE: [MessageHandler(filters.Regex('^(Self-Leveling|Acro)$'), mode)],
            BEST_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, best_time)],
            IMAGE: [MessageHandler(filters.PHOTO, save_image)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
    leaderboard_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤$'), leaderboard_start)],
        states={
            LEADERBOARD_SIMULATOR: [MessageHandler(filters.Regex('^(FPV Freerider|DCL The Game|Liftoff)$'), leaderboard_simulator)],
            LEADERBOARD_MODE: [MessageHandler(filters.Regex('^(Self-Leveling|Acro)$'), leaderboard_mode)],
            LEADERBOARD_TRACK: [MessageHandler(filters.Regex('^(map1|map2)$'), leaderboard_track)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler('start', start))
    application.add_handler(conv_handler)
    application.add_handler(result_handler)
    application.add_handler(leaderboard_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()

# See PyCharm help at https://www.jetbrains.com/help/pycharm/
